# -*- coding: utf-8 -*-
"""Copy of CapstoneRandomForest4Classes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UGnGFTxmZT9vfW8U-P0yVcTvDorSAVQI

# Data Understanding

Import Library
"""

import pandas as pd
import numpy as np
import joblib
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.ensemble import RandomForestClassifier

import pandas as pd
import numpy as np

# Baca file dengan argumen na_values
df = pd.read_csv('data.csv', na_values=['', ' ', 'NA', 'NaN', 'null', 'None'])
df

df.info()

# Drop kolom dengan jumlah non-null kurang dari 1200
df = df.drop(columns=[col for col in df.columns if df[col].count() < 1200])

# Pilih kolom numerik
import matplotlib.pyplot as plt
numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns
# Tentukan ukuran figure dan grid
plt.figure(figsize=(18, 15))
df[numerical_cols].hist(bins=20, layout=(6, 5), figsize=(18, 15), edgecolor='black')
plt.tight_layout()
plt.suptitle("Distribusi Fitur Numerikal", fontsize=20, y=1.02)
plt.show()

df.info()

df.nunique()

min_max_df = pd.DataFrame({
    'Min': df.min(numeric_only=True),
    'Max': df.max(numeric_only=True)
})
min_max_df

"""DROP NAN DAN KOLOM TIDAK DIGUNAKAN"""

df.drop(['ClientID', 'CycleNumber', 'ReproductiveCategory'], axis=1, inplace=True)
df.dropna(inplace=True)
df.reset_index(drop=True, inplace=True)

df.info()

np.random.seed(42)

# 1. Tambahkan fitur buatan
df['StressScore'] = np.random.randint(1, 6, len(df))
df['DietScore'] = np.random.randint(1, 6, len(df))
df['MedicalConditionScore'] = np.random.randint(1, 6, len(df))
df['PhysicalActivityScore'] = np.random.randint(1, 6, len(df))

# 2. Ubah target numerik menjadi kategori
def classify_cycle(length):
    if 21 <= length <= 25:
        return 'Normal Pendek'
    elif 26 <= length <= 30:
        return 'Normal Sedang'
    elif 31 <= length <= 35:
        return 'Normal Panjang'
    else:
        return 'Tidak Normal'

df['CycleCategory'] = df['LengthofCycle'].apply(classify_cycle)

# 3. Definisikan fitur dan target klasifikasi
X = df.drop(columns=['LengthofCycle', 'CycleCategory'])
y = df['CycleCategory']

smote = SMOTE(random_state=42)
X_smote, y_smote = smote.fit_resample(X, y)

encoder = LabelEncoder()
y_encoder = encoder.fit_transform(y_smote)

X_train, X_test, y_train, y_test = train_test_split(X_smote, y_encoder, random_state=42, stratify=y_encoder)

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import classification_report
y_pred = model.predict(X_test)

print("=== Confusion Matrix ===")
print(confusion_matrix(y_test, y_pred))
print("=== Classification Report ===")
print(classification_report(y_test, y_pred))

joblib.dump(model, 'model.pkl')
joblib.dump(encoder, 'encoder.pkl')